#include <stdio.h>
#include <stdlib.h>

struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Helper function to create a new tree node
struct TreeNode* newNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// In-order traversal to find Kth smallest element
void inorder(struct TreeNode* root, int* k, int* result) {
    if (root == NULL || *k == 0)
        return;

    inorder(root->left, k, result);
    
    if (--(*k) == 0) {
        *result = root->val;
        return;
    }

    inorder(root->right, k, result);
}

int kthSmallest(struct TreeNode* root, int k) {
    int result = -1;
    inorder(root, &k, &result);
    return result;
}

int main() {
    // Example BST
    struct TreeNode* root = newNode(5);
    root->left = newNode(3);
    root->right = newNode(7);
    root->left->left = newNode(2);
    root->left->right = newNode(4);
    root->right->left = newNode(6);
    root->right->right = newNode(8);

    int k = 3;
    int result = kthSmallest(root, k);
    printf("The %dth smallest element is %d\n", k, result);

    return 0;
}
