#include <stdio.h>
#include <stdlib.h>

typedef struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

TreeNode* buildTree(int* preorder, int* inorder, int preorderStart, int preorderEnd, int inorderStart, int inorderEnd) {
    if (preorderStart > preorderEnd || inorderStart > inorderEnd) {
        return NULL;
    }

    TreeNode* root = (TreeNode*)malloc(sizeof(TreeNode));
    root->val = preorder[preorderStart];

    int inorderIndex;
    for (inorderIndex = inorderStart; inorderIndex <= inorderEnd; inorderIndex++) {
        if (inorder[inorderIndex] == root->val) {
            break;
        }
    }

    root->left = buildTree(preorder, inorder, preorderStart + 1, preorderStart + inorderIndex - inorderStart, inorderStart, inorderIndex - 1);
    root->right = buildTree(preorder, inorder, preorderStart + inorderIndex - inorderStart + 1, preorderEnd, inorderIndex + 1, inorderEnd);

    return root;
}

void printInorder(TreeNode* root) {
    if (root == NULL) {
        return;
    }

    printInorder(root->left);
    printf("%d ", root->val);
    printInorder(root->right);
}

int main() {
    int preorder[] = {3, 9, 20, 15, 7};
    int inorder[] = {9, 3, 15, 20, 7};
    int n = sizeof(preorder) / sizeof(preorder[0]);

    TreeNode* root = buildTree(preorder, inorder, 0, n - 1, 0, n - 1);

    printf("Inorder traversal of the constructed tree: ");
    printInorder(root);
    printf("\n");

    return 0;
}
