#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>

using namespace std;

int minEdgesBFS(int u, int v, int n, vector<vector<int>>& edges) {
    vector<bool> visited(n, false);
    vector<int> dist(n, 0);
    queue<int> q;

    dist[u] = 0;
    visited[u] = true;
    q.push(u);

    while (!q.empty()) {
        int x = q.front();
        q.pop();

        for (int i = 0; i < edges[x].size(); i++) {
            int v = edges[x][i];
            if (!visited[v]) {
                visited[v] = true;
                dist[v] = dist[x] + 1;
                q.push(v);
            }
        }
    }

    return dist[v];
}

int main() {
    int n = 9;
    vector<vector<int>> edges(n);
    // Add edges to the graph
    // Example: edges[0].push_back(1); edges[1].push_back(0);

    int u = 1, v = 5;
    cout << "Minimum edges between " << u << " and " << v << ": " << minEdgesBFS(u, v, n, edges) << endl;

    return 0;
}
